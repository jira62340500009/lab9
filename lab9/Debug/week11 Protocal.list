
week11 Protocal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c90  08003c90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000070  08003d08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08003d08  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a2d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e7  00000000  00000000  00028acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0002a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015986  00000000  00000000  0002b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fed  00000000  00000000  000409e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e4c  00000000  00000000  000489d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce81f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  000ce874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a14 	.word	0x08003a14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003a14 	.word	0x08003a14

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fef7 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f831 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f8c1 	bl	8000668 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <main+0x64>)
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <main+0x68>)
 80004ee:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <main+0x64>)
 80004f2:	22ff      	movs	r2, #255	; 0xff
 80004f4:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <main+0x64>)
 80004f8:	22ff      	movs	r2, #255	; 0xff
 80004fa:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x64>)
 80004fe:	f000 f94b 	bl	8000798 <UARTInit>
	UARTResetStart(&UART2);
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x64>)
 8000504:	f000 f970 	bl	80007e8 <UARTResetStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x64>)
 800050a:	f000 f991 	bl	8000830 <UARTReadChar>
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
		//if input char == -1 ==> No New data
		if (inputChar != -1)
 8000512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800051a:	d006      	beq.n	800052a <main+0x5a>
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Recived [%d]\r\n", inputChar);
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 800051c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <main+0x64>)
 8000522:	2101      	movs	r1, #1
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x6c>)
 8000526:	f000 fa45 	bl	80009b4 <DynamixelProtocal2>

		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <main+0x64>)
 800052c:	f000 f9aa 	bl	8000884 <UARTTxDumpBuffer>
	{
 8000530:	e7ea      	b.n	8000508 <main+0x38>
 8000532:	bf00      	nop
 8000534:	2000008c 	.word	0x2000008c
 8000538:	20000380 	.word	0x20000380
 800053c:	200000a4 	.word	0x200000a4

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f9d0 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fda2 	bl	8002110 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fcdb 	bl	8000f8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f804 	bl	8002600 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 fcc5 	bl	8000f8c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f002 f9d4 	bl	80029f8 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 fc99 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000380 	.word	0x20000380
 8000664:	40004400 	.word	0x40004400

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2010      	movs	r0, #16
 8000690:	f000 ff67 	bl	8001562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000694:	2010      	movs	r0, #16
 8000696:	f000 ff80 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2011      	movs	r0, #17
 80006a0:	f000 ff5f 	bl	8001562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006a4:	2011      	movs	r0, #17
 80006a6:	f000 ff78 	bl	800159a <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f001 fcca 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_GPIO_Init+0xdc>)
 800075e:	f001 fb39 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000762:	2320      	movs	r3, #32
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077a:	f001 fb2b 	bl	8001dd4 <HAL_GPIO_Init>

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	10210000 	.word	0x10210000
 8000794:	40020800 	.word	0x40020800

08000798 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <UARTInit+0x4c>)
 80007a2:	88db      	ldrh	r3, [r3, #6]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f003 f864 	bl	8003874 <calloc>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <UARTInit+0x4c>)
 80007b6:	889b      	ldrh	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f003 f85a 	bl	8003874 <calloc>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	81da      	strh	r2, [r3, #14]

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6919      	ldr	r1, [r3, #16]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	88db      	ldrh	r3, [r3, #6]
 80007fc:	461a      	mov	r2, r3
 80007fe:	f002 f9b5 	bl	8002b6c <HAL_UART_Receive_DMA>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	88db      	ldrh	r3, [r3, #6]
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	1ad3      	subs	r3, r2, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	8a9b      	ldrh	r3, [r3, #20]
 8000842:	461c      	mov	r4, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ffe0 	bl	800080a <UARTGetRxHead>
 800084a:	4603      	mov	r3, r0
 800084c:	429c      	cmp	r4, r3
 800084e:	d013      	beq.n	8000878 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	8a92      	ldrh	r2, [r2, #20]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	8a9b      	ldrh	r3, [r3, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	88d2      	ldrh	r2, [r2, #6]
 8000868:	fb93 f1f2 	sdiv	r1, r3, r2
 800086c:	fb02 f201 	mul.w	r2, r2, r1
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	b29a      	uxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}

08000884 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b20      	cmp	r3, #32
 8000898:	d13d      	bne.n	8000916 <UARTTxDumpBuffer+0x92>
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d139      	bne.n	8000916 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	89da      	ldrh	r2, [r3, #14]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d02d      	beq.n	8000910 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	89da      	ldrh	r2, [r3, #14]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008bc:	429a      	cmp	r2, r3
 80008be:	d906      	bls.n	80008ce <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	89da      	ldrh	r2, [r3, #14]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	e005      	b.n	80008da <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	889a      	ldrh	r2, [r3, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	8992      	ldrh	r2, [r2, #12]
 80008e8:	4413      	add	r3, r2
 80008ea:	89fa      	ldrh	r2, [r7, #14]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f002 f8d1 	bl	8002a94 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	899b      	ldrh	r3, [r3, #12]
 80008f6:	461a      	mov	r2, r3
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	4413      	add	r3, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	8892      	ldrh	r2, [r2, #4]
 8000900:	fb93 f1f2 	sdiv	r1, r3, r2
 8000904:	fb02 f201 	mul.w	r2, r2, r1
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <UARTTxDumpBuffer+0x9c>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
	}

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001a3 	.word	0x200001a3

08000924 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	4613      	mov	r3, r2
 8000930:	80fb      	strh	r3, [r7, #6]
	 * 		lenAddBuffer = uart->TxLen;
	 * }
	 */

	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	88fa      	ldrh	r2, [r7, #6]
 8000938:	4293      	cmp	r3, r2
 800093a:	bf28      	it	cs
 800093c:	4613      	movcs	r3, r2
 800093e:	82fb      	strh	r3, [r7, #22]

	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000940:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	889b      	ldrh	r3, [r3, #4]
 8000946:	4619      	mov	r1, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	89db      	ldrh	r3, [r3, #14]
 800094c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800094e:	4293      	cmp	r3, r2
 8000950:	bfa8      	it	ge
 8000952:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8000954:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	89d2      	ldrh	r2, [r2, #14]
 800095e:	4413      	add	r3, r2
 8000960:	8aba      	ldrh	r2, [r7, #20]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	4618      	mov	r0, r3
 8000966:	f002 ffb7 	bl	80038d8 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	89db      	ldrh	r3, [r3, #14]
 800096e:	461a      	mov	r2, r3
 8000970:	8afb      	ldrh	r3, [r7, #22]
 8000972:	4413      	add	r3, r2
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	8892      	ldrh	r2, [r2, #4]
 8000978:	fb93 f1f2 	sdiv	r1, r3, r2
 800097c:	fb02 f201 	mul.w	r2, r2, r1
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	b29a      	uxth	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000988:	8afa      	ldrh	r2, [r7, #22]
 800098a:	8abb      	ldrh	r3, [r7, #20]
 800098c:	429a      	cmp	r2, r3
 800098e:	d00a      	beq.n	80009a6 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	6898      	ldr	r0, [r3, #8]
 8000994:	8abb      	ldrh	r3, [r7, #20]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800099a:	8afa      	ldrh	r2, [r7, #22]
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009a0:	461a      	mov	r2, r3
 80009a2:	f002 ff99 	bl	80038d8 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff ff6c 	bl	8000884 <UARTTxDumpBuffer>

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <DynamixelProtocal2>:


void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09c      	sub	sp, #112	; 0x70
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	72fb      	strb	r3, [r7, #11]
 80009c2:	4613      	mov	r3, r2
 80009c4:	813b      	strh	r3, [r7, #8]
	static uint16_t CRCCheck = 0;
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;

	//State Machine
	switch (State)
 80009c6:	4b9b      	ldr	r3, [pc, #620]	; (8000c34 <DynamixelProtocal2+0x280>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b0a      	cmp	r3, #10
 80009cc:	f200 8279 	bhi.w	8000ec2 <DynamixelProtocal2+0x50e>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <DynamixelProtocal2+0x24>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	08000a05 	.word	0x08000a05
 80009dc:	08000a17 	.word	0x08000a17
 80009e0:	08000a2f 	.word	0x08000a2f
 80009e4:	08000a51 	.word	0x08000a51
 80009e8:	08000a69 	.word	0x08000a69
 80009ec:	08000a9f 	.word	0x08000a9f
 80009f0:	08000ab1 	.word	0x08000ab1
 80009f4:	08000acf 	.word	0x08000acf
 80009f8:	08000adf 	.word	0x08000adf
 80009fc:	08000b0f 	.word	0x08000b0f
 8000a00:	08000b4b 	.word	0x08000b4b
	{
	case DNMXP_idle:
		if (dataIn == 0xFF)
 8000a04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a08:	2bff      	cmp	r3, #255	; 0xff
 8000a0a:	f040 8257 	bne.w	8000ebc <DynamixelProtocal2+0x508>
			State = DNMXP_1stHeader;
 8000a0e:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
		break;
 8000a14:	e252      	b.n	8000ebc <DynamixelProtocal2+0x508>
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8000a16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a1a:	2bff      	cmp	r3, #255	; 0xff
 8000a1c:	d103      	bne.n	8000a26 <DynamixelProtocal2+0x72>
			State = DNMXP_2ndHeader;
 8000a1e:	4b85      	ldr	r3, [pc, #532]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a24:	e24d      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
			State = DNMXP_idle;
 8000a26:	4b83      	ldr	r3, [pc, #524]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
		break;
 8000a2c:	e249      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 8000a2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a32:	2bfd      	cmp	r3, #253	; 0xfd
 8000a34:	d103      	bne.n	8000a3e <DynamixelProtocal2+0x8a>
			State = DNMXP_3rdHeader;
 8000a36:	4b7f      	ldr	r3, [pc, #508]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a38:	2203      	movs	r2, #3
 8000a3a:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
 8000a3c:	e240      	b.n	8000ec0 <DynamixelProtocal2+0x50c>
		else if (dataIn == 0xFF)
 8000a3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a42:	2bff      	cmp	r3, #255	; 0xff
 8000a44:	f000 823c 	beq.w	8000ec0 <DynamixelProtocal2+0x50c>
			State = DNMXP_idle;
 8000a48:	4b7a      	ldr	r3, [pc, #488]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
		break;
 8000a4e:	e237      	b.n	8000ec0 <DynamixelProtocal2+0x50c>
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 8000a50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <DynamixelProtocal2+0xac>
			State = DNMXP_Reserved;
 8000a58:	4b76      	ldr	r3, [pc, #472]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a5e:	e230      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
			State = DNMXP_idle;
 8000a60:	4b74      	ldr	r3, [pc, #464]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		break;
 8000a66:	e22c      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_Reserved:
		if ((dataIn == MotorID) | (dataIn == 0xFE))
 8000a68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a6c:	7afb      	ldrb	r3, [r7, #11]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	bf0c      	ite	eq
 8000a72:	2301      	moveq	r3, #1
 8000a74:	2300      	movne	r3, #0
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a7c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <DynamixelProtocal2+0xe2>
			State = DNMXP_ID;
 8000a8e:	4b69      	ldr	r3, [pc, #420]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a90:	2205      	movs	r2, #5
 8000a92:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a94:	e215      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
			State = DNMXP_idle;
 8000a96:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
		break;
 8000a9c:	e211      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_ID:
		datalen = dataIn & 0xFF;
 8000a9e:	893b      	ldrh	r3, [r7, #8]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b64      	ldr	r3, [pc, #400]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000aa6:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 8000aa8:	4b62      	ldr	r3, [pc, #392]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	701a      	strb	r2, [r3, #0]
		break;
 8000aae:	e208      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8;
 8000ab0:	893b      	ldrh	r3, [r7, #8]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	4b60      	ldr	r3, [pc, #384]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b5d      	ldr	r3, [pc, #372]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 8000ac6:	4b5b      	ldr	r3, [pc, #364]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	701a      	strb	r2, [r3, #0]
		break;
 8000acc:	e1f9      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_LEN2:
		inst = dataIn;
 8000ace:	893b      	ldrh	r3, [r7, #8]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b5a      	ldr	r3, [pc, #360]	; (8000c3c <DynamixelProtocal2+0x288>)
 8000ad4:	701a      	strb	r2, [r3, #0]
		State = DNMXP_Inst;
 8000ad6:	4b57      	ldr	r3, [pc, #348]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	701a      	strb	r2, [r3, #0]
		break;
 8000adc:	e1f1      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_Inst:
		if (datalen > 3)
 8000ade:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d90a      	bls.n	8000afc <DynamixelProtocal2+0x148>
		{
			parameter[0] = dataIn;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b55      	ldr	r3, [pc, #340]	; (8000c40 <DynamixelProtocal2+0x28c>)
 8000aec:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 8000aee:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <DynamixelProtocal2+0x290>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8000af4:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000af6:	2209      	movs	r2, #9
 8000af8:	701a      	strb	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}

		break;
 8000afa:	e1e2      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
			CRCCheck = dataIn & 0xff;
 8000afc:	893b      	ldrh	r3, [r7, #8]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b51      	ldr	r3, [pc, #324]	; (8000c48 <DynamixelProtocal2+0x294>)
 8000b04:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b06:	4b4b      	ldr	r3, [pc, #300]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	701a      	strb	r2, [r3, #0]
		break;
 8000b0c:	e1d9      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_ParameterCollect:

		if (datalen-3 > CollectedData)
 8000b0e:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	3b03      	subs	r3, #3
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <DynamixelProtocal2+0x290>)
 8000b16:	8812      	ldrh	r2, [r2, #0]
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	dd0d      	ble.n	8000b38 <DynamixelProtocal2+0x184>
		{
			parameter[CollectedData] = dataIn;
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <DynamixelProtocal2+0x290>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	893b      	ldrh	r3, [r7, #8]
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <DynamixelProtocal2+0x28c>)
 8000b28:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8000b2a:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <DynamixelProtocal2+0x290>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <DynamixelProtocal2+0x290>)
 8000b34:	801a      	strh	r2, [r3, #0]
		else
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}
		break;
 8000b36:	e1c4      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
			CRCCheck = dataIn & 0xff;
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <DynamixelProtocal2+0x294>)
 8000b40:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b42:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <DynamixelProtocal2+0x280>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	701a      	strb	r2, [r3, #0]
		break;
 8000b48:	e1bb      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
	case DNMXP_CRCAndExecute:
		CRCCheck |= (dataIn & 0xff) << 8;
 8000b4a:	893b      	ldrh	r3, [r7, #8]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b3d      	ldr	r3, [pc, #244]	; (8000c48 <DynamixelProtocal2+0x294>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	; (8000c48 <DynamixelProtocal2+0x294>)
 8000b5e:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 8000b60:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7;
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <DynamixelProtocal2+0x284>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	3307      	adds	r3, #7
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <DynamixelProtocal2+0x29c>)
 8000b70:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	8a9b      	ldrh	r3, [r3, #20]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <DynamixelProtocal2+0x29c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db16      	blt.n	8000bb0 <DynamixelProtocal2+0x1fc>
		{
			CRC_accum = update_crc(CRC_accum,
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000b84:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]),
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	8a92      	ldrh	r2, [r2, #20]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <DynamixelProtocal2+0x29c>)
 8000b92:	8812      	ldrh	r2, [r2, #0]
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <DynamixelProtocal2+0x29c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f000 f9a5 	bl	8000ef0 <update_crc>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	e02d      	b.n	8000c0c <DynamixelProtocal2+0x258>
					packetSize - 2);
		}
		else//overlapse
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	8a9a      	ldrh	r2, [r3, #20]
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <DynamixelProtocal2+0x29c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	88db      	ldrh	r3, [r3, #6]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000bc8:	8818      	ldrh	r0, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000bd2:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bd8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	f000 f985 	bl	8000ef0 <update_crc>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000bec:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000bf0:	8818      	ldrh	r0, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6919      	ldr	r1, [r3, #16]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	8a9b      	ldrh	r3, [r3, #20]
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f000 f976 	bl	8000ef0 <update_crc>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000c0a:	801a      	strh	r2, [r3, #0]

		}

		if (CRC_accum == CRCCheck)
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <DynamixelProtocal2+0x298>)
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <DynamixelProtocal2+0x294>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8127 	bne.w	8000e68 <DynamixelProtocal2+0x4b4>
		{
			switch (inst)
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <DynamixelProtocal2+0x288>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	f000 809e 	beq.w	8000d60 <DynamixelProtocal2+0x3ac>
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	f300 80f5 	bgt.w	8000e14 <DynamixelProtocal2+0x460>
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d012      	beq.n	8000c54 <DynamixelProtocal2+0x2a0>
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d03a      	beq.n	8000ca8 <DynamixelProtocal2+0x2f4>
 8000c32:	e0ef      	b.n	8000e14 <DynamixelProtocal2+0x460>
 8000c34:	200001a4 	.word	0x200001a4
 8000c38:	200001a6 	.word	0x200001a6
 8000c3c:	200001a8 	.word	0x200001a8
 8000c40:	200001ac 	.word	0x200001ac
 8000c44:	200002ac 	.word	0x200002ac
 8000c48:	200002ae 	.word	0x200002ae
 8000c4c:	200002b0 	.word	0x200002b0
 8000c50:	200002b2 	.word	0x200002b2
			{
			case 0x01:// ping
			{
				//create packet template
				uint8_t temp[] =
 8000c54:	4a9d      	ldr	r2, [pc, #628]	; (8000ecc <DynamixelProtocal2+0x518>)
 8000c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5c:	c303      	stmia	r3!, {r0, r1}
 8000c5e:	801a      	strh	r2, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c12      	lsrs	r2, r2, #16
 8000c64:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x04, 0x00, 0x55,0x00, 0x00, 0x00};
				//config MotorID
				temp[4] = MotorID;
 8000c66:	7afb      	ldrb	r3, [r7, #11]
 8000c68:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				//calcuate CRC
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c70:	2209      	movs	r2, #9
 8000c72:	4619      	mov	r1, r3
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f93b 	bl	8000ef0 <update_crc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				temp[9] = crc_calc & 0xff;
 8000c80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000c8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 8000c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c9c:	220b      	movs	r2, #11
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fe3f 	bl	8000924 <UARTTxWrite>
				break;
 8000ca6:	e105      	b.n	8000eb4 <DynamixelProtocal2+0x500>
			}

			case 0x02://READ
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000ca8:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <DynamixelProtocal2+0x51c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000cb0:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <DynamixelProtocal2+0x51c>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000cb8:	4a86      	ldr	r2, [pc, #536]	; (8000ed4 <DynamixelProtocal2+0x520>)
 8000cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	c303      	stmia	r3!, {r0, r1}
 8000cc2:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000cca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000cd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cdc:	3304      	adds	r3, #4
 8000cde:	121b      	asrs	r3, r3, #8
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000ce6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cea:	2209      	movs	r2, #9
 8000cec:	4619      	mov	r1, r3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f8fe 	bl	8000ef0 <update_crc>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000cfa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	18d1      	adds	r1, r2, r3
 8000d02:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000d06:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f8f0 	bl	8000ef0 <update_crc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d16:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				UARTTxWrite(uart, temp,9);
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2209      	movs	r2, #9
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fdf4 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d3c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdea 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000d50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d54:	2202      	movs	r2, #2
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fde3 	bl	8000924 <UARTTxWrite>
				break;
 8000d5e:	e0a9      	b.n	8000eb4 <DynamixelProtocal2+0x500>
			}
			case 0x03://WRITE
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000d60:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <DynamixelProtocal2+0x51c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000d68:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <DynamixelProtocal2+0x51c>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x04,0x00,0x55,0x00};
 8000d70:	4a59      	ldr	r2, [pc, #356]	; (8000ed8 <DynamixelProtocal2+0x524>)
 8000d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d78:	c303      	stmia	r3!, {r0, r1}
 8000d7a:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

				uint16_t crc_calc = update_crc(0, temp, 9);
 8000d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d86:	2209      	movs	r2, #9
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f8b0 	bl	8000ef0 <update_crc>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000d96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	18d1      	adds	r1, r2, r3
 8000d9e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000da2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f8a2 	bl	8000ef0 <update_crc>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000db2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				crctemp[1] = (crc_calc>>8)&0xff;
 8000dbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				UARTTxWrite(uart, temp,9);
 8000dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dce:	2209      	movs	r2, #9
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fda6 	bl	8000924 <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4619      	mov	r1, r3
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fd9f 	bl	8000924 <UARTTxWrite>

				for(int i = 0 ; i < datalen-5 ; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dea:	e00c      	b.n	8000e06 <DynamixelProtocal2+0x452>
				{
					MainMemory[startAddr+i] = parameter[i+2];
 8000dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dee:	1c9a      	adds	r2, r3, #2
 8000df0:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 8000df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000df6:	440b      	add	r3, r1
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <DynamixelProtocal2+0x51c>)
 8000dfa:	5c89      	ldrb	r1, [r1, r2]
 8000dfc:	4a37      	ldr	r2, [pc, #220]	; (8000edc <DynamixelProtocal2+0x528>)
 8000dfe:	54d1      	strb	r1, [r2, r3]
				for(int i = 0 ; i < datalen-5 ; i++)
 8000e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e02:	3301      	adds	r3, #1
 8000e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <DynamixelProtocal2+0x52c>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	3b05      	subs	r3, #5
 8000e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbec      	blt.n	8000dec <DynamixelProtocal2+0x438>
				}

				break;
 8000e12:	e04f      	b.n	8000eb4 <DynamixelProtocal2+0x500>
			}
			default: //Unknown Inst
			{
				uint8_t temp[] =
 8000e14:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <DynamixelProtocal2+0x530>)
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1c:	c303      	stmia	r3!, {r0, r1}
 8000e1e:	801a      	strh	r2, [r3, #0]
 8000e20:	3302      	adds	r3, #2
 8000e22:	0c12      	lsrs	r2, r2, #16
 8000e24:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2209      	movs	r2, #9
 8000e32:	4619      	mov	r1, r3
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f85b 	bl	8000ef0 <update_crc>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				temp[9] = crc_calc & 0xff;
 8000e40:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				UARTTxWrite(uart, temp, 11);
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	220b      	movs	r2, #11
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fd5f 	bl	8000924 <UARTTxWrite>

				break;
 8000e66:	e025      	b.n	8000eb4 <DynamixelProtocal2+0x500>
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <DynamixelProtocal2+0x534>)
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e70:	c303      	stmia	r3!, {r0, r1}
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	0c12      	lsrs	r2, r2, #16
 8000e78:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	763b      	strb	r3, [r7, #24]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2209      	movs	r2, #9
 8000e84:	4619      	mov	r1, r3
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f832 	bl	8000ef0 <update_crc>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			temp[9] = crc_calc & 0xff;
 8000e92:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	777b      	strb	r3, [r7, #29]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000e9a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 11);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	220b      	movs	r2, #11
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fd38 	bl	8000924 <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <DynamixelProtocal2+0x538>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		break;
 8000eba:	e002      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e000      	b.n	8000ec2 <DynamixelProtocal2+0x50e>
		break;
 8000ec0:	bf00      	nop
	}

}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	; 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08003a2c 	.word	0x08003a2c
 8000ed0:	200001ac 	.word	0x200001ac
 8000ed4:	08003a38 	.word	0x08003a38
 8000ed8:	08003a44 	.word	0x08003a44
 8000edc:	200000a4 	.word	0x200000a4
 8000ee0:	200001a6 	.word	0x200001a6
 8000ee4:	08003a50 	.word	0x08003a50
 8000ee8:	08003a5c 	.word	0x08003a5c
 8000eec:	200001a4 	.word	0x200001a4

08000ef0 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	463b      	mov	r3, r7
 8000efa:	6019      	str	r1, [r3, #0]
 8000efc:	4611      	mov	r1, r2
 8000efe:	1dbb      	adds	r3, r7, #6
 8000f00:	4602      	mov	r2, r0
 8000f02:	801a      	strh	r2, [r3, #0]
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	460a      	mov	r2, r1
 8000f08:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <update_crc+0x98>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	4611      	mov	r1, r2
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f002 fcdd 	bl	80038d8 <memcpy>
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f24:	e023      	b.n	8000f6e <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f32:	4639      	mov	r1, r7
 8000f34:	6809      	ldr	r1, [r1, #0]
 8000f36:	440b      	add	r3, r1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4053      	eors	r3, r2
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	1dbb      	adds	r3, r7, #6
 8000f62:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8000f64:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3d5      	bcc.n	8000f26 <update_crc+0x36>
	}

	return crc_accum;
 8000f7a:	1dbb      	adds	r3, r7, #6
 8000f7c:	881b      	ldrh	r3, [r3, #0]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08003a68 	.word	0x08003a68

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f000 fab8 	bl	800154c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_UART_MspInit+0x150>)
 8001006:	4293      	cmp	r3, r2
 8001008:	f040 8091 	bne.w	800112e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b4a      	ldr	r3, [pc, #296]	; (800113c <HAL_UART_MspInit+0x154>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a49      	ldr	r2, [pc, #292]	; (800113c <HAL_UART_MspInit+0x154>)
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <HAL_UART_MspInit+0x154>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b43      	ldr	r3, [pc, #268]	; (800113c <HAL_UART_MspInit+0x154>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a42      	ldr	r2, [pc, #264]	; (800113c <HAL_UART_MspInit+0x154>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b40      	ldr	r3, [pc, #256]	; (800113c <HAL_UART_MspInit+0x154>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001054:	2307      	movs	r3, #7
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4838      	ldr	r0, [pc, #224]	; (8001140 <HAL_UART_MspInit+0x158>)
 8001060:	f000 feb8 	bl	8001dd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <HAL_UART_MspInit+0x15c>)
 8001066:	4a38      	ldr	r2, [pc, #224]	; (8001148 <HAL_UART_MspInit+0x160>)
 8001068:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_UART_MspInit+0x15c>)
 800106c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001070:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_UART_MspInit+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_UART_MspInit+0x15c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_UART_MspInit+0x15c>)
 8001080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001084:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <HAL_UART_MspInit+0x15c>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_UART_MspInit+0x15c>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <HAL_UART_MspInit+0x15c>)
 8001094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001098:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <HAL_UART_MspInit+0x15c>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_UART_MspInit+0x15c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a6:	4827      	ldr	r0, [pc, #156]	; (8001144 <HAL_UART_MspInit+0x15c>)
 80010a8:	f000 fa92 	bl	80015d0 <HAL_DMA_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010b2:	f7ff ff6b 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_UART_MspInit+0x15c>)
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_UART_MspInit+0x15c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_UART_MspInit+0x164>)
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_UART_MspInit+0x168>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_UART_MspInit+0x164>)
 80010ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_UART_MspInit+0x164>)
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_UART_MspInit+0x164>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_UART_MspInit+0x164>)
 80010de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_UART_MspInit+0x164>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_UART_MspInit+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_UART_MspInit+0x164>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UART_MspInit+0x164>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_UART_MspInit+0x164>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <HAL_UART_MspInit+0x164>)
 8001104:	f000 fa64 	bl	80015d0 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800110e:	f7ff ff3d 	bl	8000f8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_UART_MspInit+0x164>)
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_UART_MspInit+0x164>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2026      	movs	r0, #38	; 0x26
 8001124:	f000 fa1d 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001128:	2026      	movs	r0, #38	; 0x26
 800112a:	f000 fa36 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	200002c0 	.word	0x200002c0
 8001148:	40026088 	.word	0x40026088
 800114c:	20000320 	.word	0x20000320
 8001150:	400260a0 	.word	0x400260a0

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a0:	f000 f8e4 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <DMA1_Stream5_IRQHandler+0x10>)
 80011ae:	f000 fba7 	bl	8001900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002c0 	.word	0x200002c0

080011bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Stream6_IRQHandler+0x10>)
 80011c2:	f000 fb9d 	bl	8001900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000320 	.word	0x20000320

080011d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <USART2_IRQHandler+0x10>)
 80011d6:	f001 fcf9 	bl	8002bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000380 	.word	0x20000380

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f002 fb36 	bl	8003884 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20020000 	.word	0x20020000
 8001244:	00000400 	.word	0x00000400
 8001248:	200002b4 	.word	0x200002b4
 800124c:	200003d8 	.word	0x200003d8

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f002 faf5 	bl	8003890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff f913 	bl	80004d0 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012b8:	08003c98 	.word	0x08003c98
  ldr r2, =_sbss
 80012bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012c0:	200003d8 	.word	0x200003d8

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f92b 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fe4c 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f943 	bl	80015b6 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f90b 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	200003c4 	.word	0x200003c4

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200003c4 	.word	0x200003c4

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff3e 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff31 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff feda 	bl	8001394 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e099      	b.n	8001720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2202      	movs	r2, #2
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160c:	e00f      	b.n	800162e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800160e:	f7ff fec1 	bl	8001394 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b05      	cmp	r3, #5
 800161a:	d908      	bls.n	800162e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e078      	b.n	8001720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e8      	bne.n	800160e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_DMA_Init+0x158>)
 8001648:	4013      	ands	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4313      	orrs	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2b04      	cmp	r3, #4
 8001686:	d107      	bne.n	8001698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4313      	orrs	r3, r2
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4313      	orrs	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f023 0307 	bic.w	r3, r3, #7
 80016ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d117      	bne.n	80016f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00e      	beq.n	80016f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fb01 	bl	8001cdc <DMA_CheckFifoParam>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ee:	2301      	movs	r3, #1
 80016f0:	e016      	b.n	8001720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fab8 	bl	8001c70 <DMA_CalcBaseAndBitshift>
 8001700:	4603      	mov	r3, r0
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	f010803f 	.word	0xf010803f

0800172c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_DMA_Start_IT+0x26>
 800174e:	2302      	movs	r3, #2
 8001750:	e040      	b.n	80017d4 <HAL_DMA_Start_IT+0xa8>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d12f      	bne.n	80017c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fa4a 	bl	8001c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	223f      	movs	r2, #63	; 0x3f
 8001786:	409a      	lsls	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0216 	orr.w	r2, r2, #22
 800179a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0208 	orr.w	r2, r2, #8
 80017b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e005      	b.n	80017d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
 80017d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ea:	f7ff fdd3 	bl	8001394 <HAL_GetTick>
 80017ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e052      	b.n	80018b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0216 	bic.w	r2, r2, #22
 800181c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_DMA_Abort+0x62>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0208 	bic.w	r2, r2, #8
 800184c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0201 	bic.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185e:	e013      	b.n	8001888 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001860:	f7ff fd98 	bl	8001394 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b05      	cmp	r3, #5
 800186c:	d90c      	bls.n	8001888 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2220      	movs	r2, #32
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2203      	movs	r2, #3
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e015      	b.n	80018b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e4      	bne.n	8001860 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	223f      	movs	r2, #63	; 0x3f
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d004      	beq.n	80018da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00c      	b.n	80018f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2205      	movs	r2, #5
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800190c:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_DMA_IRQHandler+0x258>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a92      	ldr	r2, [pc, #584]	; (8001b5c <HAL_DMA_IRQHandler+0x25c>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	2208      	movs	r2, #8
 800192c:	409a      	lsls	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01a      	beq.n	800196c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2208      	movs	r2, #8
 800195a:	409a      	lsls	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2201      	movs	r2, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d012      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	f043 0202 	orr.w	r2, r3, #2
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	2204      	movs	r2, #4
 80019a8:	409a      	lsls	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d012      	beq.n	80019d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00b      	beq.n	80019d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	2204      	movs	r2, #4
 80019c6:	409a      	lsls	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	2210      	movs	r2, #16
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d043      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d03c      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2210      	movs	r2, #16
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d018      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d024      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
 8001a2e:	e01f      	b.n	8001a70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
 8001a40:	e016      	b.n	8001a70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0208 	bic.w	r2, r2, #8
 8001a5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	2220      	movs	r2, #32
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 808e 	beq.w	8001b9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8086 	beq.w	8001b9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2220      	movs	r2, #32
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d136      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0216 	bic.w	r2, r2, #22
 8001ab8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <HAL_DMA_IRQHandler+0x1da>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0208 	bic.w	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	223f      	movs	r2, #63	; 0x3f
 8001af0:	409a      	lsls	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d07d      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
        }
        return;
 8001b16:	e078      	b.n	8001c0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01c      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d108      	bne.n	8001b46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d030      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
 8001b44:	e02b      	b.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d027      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
 8001b56:	e022      	b.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0210 	bic.w	r2, r2, #16
 8001b7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d032      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d022      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d307      	bcc.n	8001be6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f2      	bne.n	8001bca <HAL_DMA_IRQHandler+0x2ca>
 8001be4:	e000      	b.n	8001be8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001be6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
 8001c08:	e000      	b.n	8001c0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c0a:	bf00      	nop
    }
  }
}
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b40      	cmp	r3, #64	; 0x40
 8001c40:	d108      	bne.n	8001c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c52:	e007      	b.n	8001c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3b10      	subs	r3, #16
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d909      	bls.n	8001cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	1d1a      	adds	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58
 8001cb0:	e007      	b.n	8001cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	aaaaaaab 	.word	0xaaaaaaab
 8001cd8:	08003c80 	.word	0x08003c80

08001cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11f      	bne.n	8001d36 <DMA_CheckFifoParam+0x5a>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d856      	bhi.n	8001daa <DMA_CheckFifoParam+0xce>
 8001cfc:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <DMA_CheckFifoParam+0x28>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d27 	.word	0x08001d27
 8001d0c:	08001d15 	.word	0x08001d15
 8001d10:	08001dab 	.word	0x08001dab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d046      	beq.n	8001dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d24:	e043      	b.n	8001dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d2e:	d140      	bne.n	8001db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d34:	e03d      	b.n	8001db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3e:	d121      	bne.n	8001d84 <DMA_CheckFifoParam+0xa8>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d837      	bhi.n	8001db6 <DMA_CheckFifoParam+0xda>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <DMA_CheckFifoParam+0x70>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d63 	.word	0x08001d63
 8001d54:	08001d5d 	.word	0x08001d5d
 8001d58:	08001d75 	.word	0x08001d75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d60:	e030      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d025      	beq.n	8001dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d72:	e022      	b.n	8001dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d7c:	d11f      	bne.n	8001dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d82:	e01c      	b.n	8001dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d903      	bls.n	8001d92 <DMA_CheckFifoParam+0xb6>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d003      	beq.n	8001d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d90:	e018      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
      break;
 8001d96:	e015      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00e      	beq.n	8001dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      break;
 8001da8:	e00b      	b.n	8001dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001daa:	bf00      	nop
 8001dac:	e00a      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e008      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e006      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e004      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e002      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dbe:	bf00      	nop
 8001dc0:	e000      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e159      	b.n	80020a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8148 	bne.w	800209e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a2 	beq.w	800209e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a49      	ldr	r2, [pc, #292]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x202>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_GPIO_Init+0x2f4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x1fe>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a47      	ldr	r2, [pc, #284]	; (80020cc <HAL_GPIO_Init+0x2f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a46      	ldr	r2, [pc, #280]	; (80020d0 <HAL_GPIO_Init+0x2fc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x1f6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a45      	ldr	r2, [pc, #276]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x1f2>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4935      	ldr	r1, [pc, #212]	; (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_GPIO_Init+0x304>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x304>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_GPIO_Init+0x304>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <HAL_GPIO_Init+0x304>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_GPIO_Init+0x304>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_GPIO_Init+0x304>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_GPIO_Init+0x304>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_GPIO_Init+0x304>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f aea2 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40013c00 	.word	0x40013c00

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e264      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d075      	beq.n	800221a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212e:	4ba3      	ldr	r3, [pc, #652]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d00c      	beq.n	8002154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213a:	4ba0      	ldr	r3, [pc, #640]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002142:	2b08      	cmp	r3, #8
 8002144:	d112      	bne.n	800216c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002146:	4b9d      	ldr	r3, [pc, #628]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002152:	d10b      	bne.n	800216c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	4b99      	ldr	r3, [pc, #612]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d05b      	beq.n	8002218 <HAL_RCC_OscConfig+0x108>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d157      	bne.n	8002218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e23f      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d106      	bne.n	8002184 <HAL_RCC_OscConfig+0x74>
 8002176:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a90      	ldr	r2, [pc, #576]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xb0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x98>
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a8a      	ldr	r2, [pc, #552]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a87      	ldr	r2, [pc, #540]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xb0>
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a80      	ldr	r2, [pc, #512]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff f8e4 	bl	8001394 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f8e0 	bl	8001394 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e204      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xc0>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff f8d0 	bl	8001394 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f8cc 	bl	8001394 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1f0      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0xe8>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b62      	ldr	r3, [pc, #392]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x152>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1c4      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b56      	ldr	r3, [pc, #344]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4952      	ldr	r1, [pc, #328]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <HAL_RCC_OscConfig+0x2b0>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff f885 	bl	8001394 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff f881 	bl	8001394 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1a5      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4940      	ldr	r1, [pc, #256]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_OscConfig+0x2b0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f864 	bl	8001394 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d0:	f7ff f860 	bl	8001394 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e184      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d030      	beq.n	800235c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x2b4>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002308:	f7ff f844 	bl	8001394 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff f840 	bl	8001394 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e164      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x200>
 800232e:	e015      	b.n	800235c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x2b4>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff f82d 	bl	8001394 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233e:	f7ff f829 	bl	8001394 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e14d      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a0 	beq.w	80024aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x2b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d121      	bne.n	80023ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_OscConfig+0x2b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_RCC_OscConfig+0x2b8>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe ffef 	bl	8001394 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e011      	b.n	80023de <HAL_RCC_OscConfig+0x2ce>
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
 80023c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7fe ffe2 	bl	8001394 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e106      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <HAL_RCC_OscConfig+0x4e4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x2f0>
 80023f2:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x32a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x312>
 8002408:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x32a>
 8002422:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a74      	ldr	r2, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe ffa7 	bl	8001394 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe ffa3 	bl	8001394 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0c5      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x33a>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe ff91 	bl	8001394 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe ff8d 	bl	8001394 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0af      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 809b 	beq.w	80025ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d05c      	beq.n	800257a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d141      	bne.n	800254c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x4ec>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7fe ff61 	bl	8001394 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d6:	f7fe ff5d 	bl	8001394 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e081      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	019b      	lsls	r3, r3, #6
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	3b01      	subs	r3, #1
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <HAL_RCC_OscConfig+0x4ec>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe ff36 	bl	8001394 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe ff32 	bl	8001394 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e056      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x41c>
 800254a:	e04e      	b.n	80025ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCC_OscConfig+0x4ec>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe ff1f 	bl	8001394 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe ff1b 	bl	8001394 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e03f      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256c:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x44a>
 8002578:	e037      	b.n	80025ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e032      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_RCC_OscConfig+0x4e8>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d028      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d121      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d11a      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40007000 	.word	0x40007000
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470060 	.word	0x42470060

08002600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cc      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d90c      	bls.n	800263c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b65      	ldr	r3, [pc, #404]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a58      	ldr	r2, [pc, #352]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800265e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d044      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d119      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e067      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4934      	ldr	r1, [pc, #208]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fe50 	bl	8001394 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe fe4c 	bl	8001394 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d20c      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490a      	ldr	r1, [pc, #40]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fdb0 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08003c68 	.word	0x08003c68
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	2300      	movs	r3, #0
 80027de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e4:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d00d      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x40>
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	f200 80bd 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x34>
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x3a>
 80027fe:	e0b7      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b61      	ldr	r3, [pc, #388]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002802:	60bb      	str	r3, [r7, #8]
       break;
 8002804:	e0b7      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002806:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002808:	60bb      	str	r3, [r7, #8]
      break;
 800280a:	e0b4      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800280c:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d04d      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002822:	4b58      	ldr	r3, [pc, #352]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	461a      	mov	r2, r3
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	ea02 0800 	and.w	r8, r2, r0
 800283a:	ea03 0901 	and.w	r9, r3, r1
 800283e:	4640      	mov	r0, r8
 8002840:	4649      	mov	r1, r9
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	014b      	lsls	r3, r1, #5
 800284c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002850:	0142      	lsls	r2, r0, #5
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	ebb0 0008 	subs.w	r0, r0, r8
 800285a:	eb61 0109 	sbc.w	r1, r1, r9
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	018b      	lsls	r3, r1, #6
 8002868:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800286c:	0182      	lsls	r2, r0, #6
 800286e:	1a12      	subs	r2, r2, r0
 8002870:	eb63 0301 	sbc.w	r3, r3, r1
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	00d9      	lsls	r1, r3, #3
 800287e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002882:	00d0      	lsls	r0, r2, #3
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	eb12 0208 	adds.w	r2, r2, r8
 800288c:	eb43 0309 	adc.w	r3, r3, r9
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	0259      	lsls	r1, r3, #9
 800289a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800289e:	0250      	lsls	r0, r2, #9
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	f7fd fc92 	bl	80001d8 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e04a      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	461a      	mov	r2, r3
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	ea02 0400 	and.w	r4, r2, r0
 80028d6:	ea03 0501 	and.w	r5, r3, r1
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	014b      	lsls	r3, r1, #5
 80028e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ec:	0142      	lsls	r2, r0, #5
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	1b00      	subs	r0, r0, r4
 80028f4:	eb61 0105 	sbc.w	r1, r1, r5
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	018b      	lsls	r3, r1, #6
 8002902:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002906:	0182      	lsls	r2, r0, #6
 8002908:	1a12      	subs	r2, r2, r0
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	f04f 0000 	mov.w	r0, #0
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	00d9      	lsls	r1, r3, #3
 8002918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800291c:	00d0      	lsls	r0, r2, #3
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	1912      	adds	r2, r2, r4
 8002924:	eb45 0303 	adc.w	r3, r5, r3
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	0299      	lsls	r1, r3, #10
 8002932:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002936:	0290      	lsls	r0, r2, #10
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f7fd fc46 	bl	80001d8 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	3301      	adds	r3, #1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	60bb      	str	r3, [r7, #8]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002972:	60bb      	str	r3, [r7, #8]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	68bb      	ldr	r3, [r7, #8]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002996:	681b      	ldr	r3, [r3, #0]
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff0 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08003c78 	.word	0x08003c78

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffdc 	bl	8002990 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0b5b      	lsrs	r3, r3, #13
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4903      	ldr	r1, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	08003c78 	.word	0x08003c78

080029f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e03f      	b.n	8002a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fae2 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	; 0x24
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fd51 	bl	80034e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d153      	bne.n	8002b56 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_UART_Transmit_DMA+0x26>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e04c      	b.n	8002b58 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit_DMA+0x38>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e045      	b.n	8002b58 <HAL_UART_Transmit_DMA+0xc4>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	; 0x21
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_UART_Transmit_DMA+0xcc>)
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_UART_Transmit_DMA+0xd0>)
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_UART_Transmit_DMA+0xd4>)
 8002b0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	2200      	movs	r2, #0
 8002b12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3304      	adds	r3, #4
 8002b28:	461a      	mov	r2, r3
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	f7fe fdfe 	bl	800172c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b50:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	08002fa1 	.word	0x08002fa1
 8002b64:	08002ff3 	.word	0x08002ff3
 8002b68:	080030db 	.word	0x080030db

08002b6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d11d      	bne.n	8002bc2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Receive_DMA+0x26>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e016      	b.n	8002bc4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Receive_DMA+0x38>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e00f      	b.n	8002bc4 <HAL_UART_Receive_DMA+0x58>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fad9 	bl	8003170 <UART_Start_Receive_DMA>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	e000      	b.n	8002bc4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
  }
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_UART_IRQHandler+0x52>
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fbcd 	bl	80033b6 <UART_Receive_IT>
      return;
 8002c1c:	e17c      	b.n	8002f18 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80b1 	beq.w	8002d88 <HAL_UART_IRQHandler+0x1bc>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_UART_IRQHandler+0x70>
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a6 	beq.w	8002d88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_UART_IRQHandler+0x90>
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_UART_IRQHandler+0xb0>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0202 	orr.w	r2, r3, #2
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_UART_IRQHandler+0xd0>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00f      	beq.n	8002cc6 <HAL_UART_IRQHandler+0xfa>
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_UART_IRQHandler+0xee>
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f043 0208 	orr.w	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 811f 	beq.w	8002f0e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_UART_IRQHandler+0x11e>
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fb66 	bl	80033b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_UART_IRQHandler+0x146>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d031      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 faa6 	bl	8003264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d123      	bne.n	8002d6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d013      	beq.n	8002d66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <HAL_UART_IRQHandler+0x354>)
 8002d44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fdb6 	bl	80018bc <HAL_DMA_Abort_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d60:	4610      	mov	r0, r2
 8002d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e00e      	b.n	8002d84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f904 	bl	8002f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e00a      	b.n	8002d84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f900 	bl	8002f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	e006      	b.n	8002d84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8fc 	bl	8002f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d82:	e0c4      	b.n	8002f0e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	bf00      	nop
    return;
 8002d86:	e0c2      	b.n	8002f0e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 80a2 	bne.w	8002ed6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 809c 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8096 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d14f      	bne.n	8002e6e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002dd8:	8a3b      	ldrh	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8099 	beq.w	8002f12 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002de4:	8a3a      	ldrh	r2, [r7, #16]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f080 8093 	bcs.w	8002f12 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8a3a      	ldrh	r2, [r7, #16]
 8002df0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d02b      	beq.n	8002e56 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0210 	bic.w	r2, r2, #16
 8002e4a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fcc3 	bl	80017dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f88e 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e6c:	e051      	b.n	8002f12 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d047      	beq.n	8002f16 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002e86:	8a7b      	ldrh	r3, [r7, #18]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d044      	beq.n	8002f16 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e9a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0210 	bic.w	r2, r2, #16
 8002ec8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eca:	8a7b      	ldrh	r3, [r7, #18]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f85a 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ed4:	e01f      	b.n	8002f16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x326>
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9fb 	bl	80032e6 <UART_Transmit_IT>
    return;
 8002ef0:	e012      	b.n	8002f18 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_UART_IRQHandler+0x34c>
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa3d 	bl	8003386 <UART_EndTransmit_IT>
    return;
 8002f0c:	e004      	b.n	8002f18 <HAL_UART_IRQHandler+0x34c>
    return;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_UART_IRQHandler+0x34c>
      return;
 8002f16:	bf00      	nop
  }
}
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	080032bf 	.word	0x080032bf

08002f24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fe2:	e002      	b.n	8002fea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff ff9d 	bl	8002f24 <HAL_UART_TxCpltCallback>
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff99 	bl	8002f38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d12a      	bne.n	8003080 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff ff7a 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003094:	e002      	b.n	800309c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ff58 	bl	8002f4c <HAL_UART_RxCpltCallback>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff ff5f 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030ca:	e002      	b.n	80030d2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff ff47 	bl	8002f60 <HAL_UART_RxHalfCpltCallback>
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b21      	cmp	r3, #33	; 0x21
 800310c:	d108      	bne.n	8003120 <UART_DMAError+0x46>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f000 f88c 	bl	8003238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b22      	cmp	r3, #34	; 0x22
 8003140:	d108      	bne.n	8003154 <UART_DMAError+0x7a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f000 f888 	bl	8003264 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003160:	68b8      	ldr	r0, [r7, #8]
 8003162:	f7ff ff07 	bl	8002f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2222      	movs	r2, #34	; 0x22
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <UART_Start_Receive_DMA+0xbc>)
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	4a22      	ldr	r2, [pc, #136]	; (8003230 <UART_Start_Receive_DMA+0xc0>)
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	4a21      	ldr	r2, [pc, #132]	; (8003234 <UART_Start_Receive_DMA+0xc4>)
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	2200      	movs	r2, #0
 80031b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	f7fe faac 	bl	800172c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003200:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0800300f 	.word	0x0800300f
 8003230:	080030a5 	.word	0x080030a5
 8003234:	080030db 	.word	0x080030db

08003238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800324e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800327a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0210 	bic.w	r2, r2, #16
 80032a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7ff fe4b 	bl	8002f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b21      	cmp	r3, #33	; 0x21
 80032f8:	d13e      	bne.n	8003378 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d114      	bne.n	800332e <UART_Transmit_IT+0x48>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003320:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]
 800332c:	e008      	b.n	8003340 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	1c59      	adds	r1, r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6211      	str	r1, [r2, #32]
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29b      	uxth	r3, r3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4619      	mov	r1, r3
 800334e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003362:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003372:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fdbc 	bl	8002f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	f040 8087 	bne.w	80034da <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d117      	bne.n	8003406 <UART_Receive_IT+0x50>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d113      	bne.n	8003406 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
 8003404:	e026      	b.n	8003454 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d007      	beq.n	800342a <UART_Receive_IT+0x74>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <UART_Receive_IT+0x82>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e008      	b.n	800344a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4619      	mov	r1, r3
 8003462:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003464:	2b00      	cmp	r3, #0
 8003466:	d136      	bne.n	80034d6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0220 	bic.w	r2, r2, #32
 8003476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10e      	bne.n	80034c6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fd62 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
 80034c4:	e002      	b.n	80034cc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fd40 	bl	8002f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e002      	b.n	80034dc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e000      	b.n	80034dc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
  }
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e8:	b09f      	sub	sp, #124	; 0x7c
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	ea40 0301 	orr.w	r3, r0, r1
 8003504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	431a      	orrs	r2, r3
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4313      	orrs	r3, r2
 800351c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003528:	f021 010c 	bic.w	r1, r1, #12
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003532:	430b      	orrs	r3, r1
 8003534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	ea40 0301 	orr.w	r3, r0, r1
 800354c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4bc5      	ldr	r3, [pc, #788]	; (8003868 <UART_SetConfig+0x384>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d004      	beq.n	8003562 <UART_SetConfig+0x7e>
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4bc3      	ldr	r3, [pc, #780]	; (800386c <UART_SetConfig+0x388>)
 800355e:	429a      	cmp	r2, r3
 8003560:	d103      	bne.n	800356a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003562:	f7ff fa35 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003566:	6778      	str	r0, [r7, #116]	; 0x74
 8003568:	e002      	b.n	8003570 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7ff fa1d 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 800356e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003578:	f040 80b6 	bne.w	80036e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800357c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800357e:	461c      	mov	r4, r3
 8003580:	f04f 0500 	mov.w	r5, #0
 8003584:	4622      	mov	r2, r4
 8003586:	462b      	mov	r3, r5
 8003588:	1891      	adds	r1, r2, r2
 800358a:	6439      	str	r1, [r7, #64]	; 0x40
 800358c:	415b      	adcs	r3, r3
 800358e:	647b      	str	r3, [r7, #68]	; 0x44
 8003590:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003594:	1912      	adds	r2, r2, r4
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	f04f 0100 	mov.w	r1, #0
 80035a2:	00d9      	lsls	r1, r3, #3
 80035a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a8:	00d0      	lsls	r0, r2, #3
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	1911      	adds	r1, r2, r4
 80035b0:	6639      	str	r1, [r7, #96]	; 0x60
 80035b2:	416b      	adcs	r3, r5
 80035b4:	667b      	str	r3, [r7, #100]	; 0x64
 80035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c4:	415b      	adcs	r3, r3
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035d0:	f7fc fe02 	bl	80001d8 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4ba5      	ldr	r3, [pc, #660]	; (8003870 <UART_SetConfig+0x38c>)
 80035da:	fba3 2302 	umull	r2, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011e      	lsls	r6, r3, #4
 80035e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e4:	461c      	mov	r4, r3
 80035e6:	f04f 0500 	mov.w	r5, #0
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	6339      	str	r1, [r7, #48]	; 0x30
 80035f2:	415b      	adcs	r3, r3
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
 80035f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035fa:	1912      	adds	r2, r2, r4
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	f04f 0000 	mov.w	r0, #0
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	00d9      	lsls	r1, r3, #3
 800360a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800360e:	00d0      	lsls	r0, r2, #3
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	1911      	adds	r1, r2, r4
 8003616:	65b9      	str	r1, [r7, #88]	; 0x58
 8003618:	416b      	adcs	r3, r5
 800361a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	1891      	adds	r1, r2, r2
 8003628:	62b9      	str	r1, [r7, #40]	; 0x28
 800362a:	415b      	adcs	r3, r3
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003632:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003636:	f7fc fdcf 	bl	80001d8 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <UART_SetConfig+0x38c>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	3332      	adds	r3, #50	; 0x32
 8003652:	4a87      	ldr	r2, [pc, #540]	; (8003870 <UART_SetConfig+0x38c>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003660:	441e      	add	r6, r3
 8003662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003664:	4618      	mov	r0, r3
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	1894      	adds	r4, r2, r2
 8003670:	623c      	str	r4, [r7, #32]
 8003672:	415b      	adcs	r3, r3
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800367a:	1812      	adds	r2, r2, r0
 800367c:	eb41 0303 	adc.w	r3, r1, r3
 8003680:	f04f 0400 	mov.w	r4, #0
 8003684:	f04f 0500 	mov.w	r5, #0
 8003688:	00dd      	lsls	r5, r3, #3
 800368a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800368e:	00d4      	lsls	r4, r2, #3
 8003690:	4622      	mov	r2, r4
 8003692:	462b      	mov	r3, r5
 8003694:	1814      	adds	r4, r2, r0
 8003696:	653c      	str	r4, [r7, #80]	; 0x50
 8003698:	414b      	adcs	r3, r1
 800369a:	657b      	str	r3, [r7, #84]	; 0x54
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	461a      	mov	r2, r3
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	1891      	adds	r1, r2, r2
 80036a8:	61b9      	str	r1, [r7, #24]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036b6:	f7fc fd8f 	bl	80001d8 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <UART_SetConfig+0x38c>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	; 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	3332      	adds	r3, #50	; 0x32
 80036d2:	4a67      	ldr	r2, [pc, #412]	; (8003870 <UART_SetConfig+0x38c>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 0207 	and.w	r2, r3, #7
 80036de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4432      	add	r2, r6
 80036e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e6:	e0b9      	b.n	800385c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ea:	461c      	mov	r4, r3
 80036ec:	f04f 0500 	mov.w	r5, #0
 80036f0:	4622      	mov	r2, r4
 80036f2:	462b      	mov	r3, r5
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	6139      	str	r1, [r7, #16]
 80036f8:	415b      	adcs	r3, r3
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003700:	1912      	adds	r2, r2, r4
 8003702:	eb45 0303 	adc.w	r3, r5, r3
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	00d9      	lsls	r1, r3, #3
 8003710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003714:	00d0      	lsls	r0, r2, #3
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	eb12 0804 	adds.w	r8, r2, r4
 800371e:	eb43 0905 	adc.w	r9, r3, r5
 8003722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	008b      	lsls	r3, r1, #2
 8003736:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800373a:	0082      	lsls	r2, r0, #2
 800373c:	4640      	mov	r0, r8
 800373e:	4649      	mov	r1, r9
 8003740:	f7fc fd4a 	bl	80001d8 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <UART_SetConfig+0x38c>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011e      	lsls	r6, r3, #4
 8003752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003754:	4618      	mov	r0, r3
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	1894      	adds	r4, r2, r2
 8003760:	60bc      	str	r4, [r7, #8]
 8003762:	415b      	adcs	r3, r3
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376a:	1812      	adds	r2, r2, r0
 800376c:	eb41 0303 	adc.w	r3, r1, r3
 8003770:	f04f 0400 	mov.w	r4, #0
 8003774:	f04f 0500 	mov.w	r5, #0
 8003778:	00dd      	lsls	r5, r3, #3
 800377a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800377e:	00d4      	lsls	r4, r2, #3
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	1814      	adds	r4, r2, r0
 8003786:	64bc      	str	r4, [r7, #72]	; 0x48
 8003788:	414b      	adcs	r3, r1
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4618      	mov	r0, r3
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	008b      	lsls	r3, r1, #2
 80037a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037a4:	0082      	lsls	r2, r0, #2
 80037a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037aa:	f7fc fd15 	bl	80001d8 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b2f      	ldr	r3, [pc, #188]	; (8003870 <UART_SetConfig+0x38c>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <UART_SetConfig+0x38c>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d2:	441e      	add	r6, r3
 80037d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d6:	4618      	mov	r0, r3
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	1894      	adds	r4, r2, r2
 80037e2:	603c      	str	r4, [r7, #0]
 80037e4:	415b      	adcs	r3, r3
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ec:	1812      	adds	r2, r2, r0
 80037ee:	eb41 0303 	adc.w	r3, r1, r3
 80037f2:	f04f 0400 	mov.w	r4, #0
 80037f6:	f04f 0500 	mov.w	r5, #0
 80037fa:	00dd      	lsls	r5, r3, #3
 80037fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003800:	00d4      	lsls	r4, r2, #3
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	eb12 0a00 	adds.w	sl, r2, r0
 800380a:	eb43 0b01 	adc.w	fp, r3, r1
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	008b      	lsls	r3, r1, #2
 8003822:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003826:	0082      	lsls	r2, r0, #2
 8003828:	4650      	mov	r0, sl
 800382a:	4659      	mov	r1, fp
 800382c:	f7fc fcd4 	bl	80001d8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <UART_SetConfig+0x38c>)
 8003836:	fba3 1302 	umull	r1, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2164      	movs	r1, #100	; 0x64
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	3332      	adds	r3, #50	; 0x32
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <UART_SetConfig+0x38c>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 020f 	and.w	r2, r3, #15
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4432      	add	r2, r6
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	377c      	adds	r7, #124	; 0x7c
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003866:	bf00      	nop
 8003868:	40011000 	.word	0x40011000
 800386c:	40011400 	.word	0x40011400
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <calloc>:
 8003874:	4b02      	ldr	r3, [pc, #8]	; (8003880 <calloc+0xc>)
 8003876:	460a      	mov	r2, r1
 8003878:	4601      	mov	r1, r0
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	f000 b842 	b.w	8003904 <_calloc_r>
 8003880:	2000000c 	.word	0x2000000c

08003884 <__errno>:
 8003884:	4b01      	ldr	r3, [pc, #4]	; (800388c <__errno+0x8>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c

08003890 <__libc_init_array>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4d0d      	ldr	r5, [pc, #52]	; (80038c8 <__libc_init_array+0x38>)
 8003894:	4c0d      	ldr	r4, [pc, #52]	; (80038cc <__libc_init_array+0x3c>)
 8003896:	1b64      	subs	r4, r4, r5
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	2600      	movs	r6, #0
 800389c:	42a6      	cmp	r6, r4
 800389e:	d109      	bne.n	80038b4 <__libc_init_array+0x24>
 80038a0:	4d0b      	ldr	r5, [pc, #44]	; (80038d0 <__libc_init_array+0x40>)
 80038a2:	4c0c      	ldr	r4, [pc, #48]	; (80038d4 <__libc_init_array+0x44>)
 80038a4:	f000 f8b6 	bl	8003a14 <_init>
 80038a8:	1b64      	subs	r4, r4, r5
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	2600      	movs	r6, #0
 80038ae:	42a6      	cmp	r6, r4
 80038b0:	d105      	bne.n	80038be <__libc_init_array+0x2e>
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b8:	4798      	blx	r3
 80038ba:	3601      	adds	r6, #1
 80038bc:	e7ee      	b.n	800389c <__libc_init_array+0xc>
 80038be:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c2:	4798      	blx	r3
 80038c4:	3601      	adds	r6, #1
 80038c6:	e7f2      	b.n	80038ae <__libc_init_array+0x1e>
 80038c8:	08003c90 	.word	0x08003c90
 80038cc:	08003c90 	.word	0x08003c90
 80038d0:	08003c90 	.word	0x08003c90
 80038d4:	08003c94 	.word	0x08003c94

080038d8 <memcpy>:
 80038d8:	440a      	add	r2, r1
 80038da:	4291      	cmp	r1, r2
 80038dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80038e0:	d100      	bne.n	80038e4 <memcpy+0xc>
 80038e2:	4770      	bx	lr
 80038e4:	b510      	push	{r4, lr}
 80038e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ee:	4291      	cmp	r1, r2
 80038f0:	d1f9      	bne.n	80038e6 <memcpy+0xe>
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <memset>:
 80038f4:	4402      	add	r2, r0
 80038f6:	4603      	mov	r3, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <_calloc_r>:
 8003904:	b513      	push	{r0, r1, r4, lr}
 8003906:	434a      	muls	r2, r1
 8003908:	4611      	mov	r1, r2
 800390a:	9201      	str	r2, [sp, #4]
 800390c:	f000 f80a 	bl	8003924 <_malloc_r>
 8003910:	4604      	mov	r4, r0
 8003912:	b118      	cbz	r0, 800391c <_calloc_r+0x18>
 8003914:	9a01      	ldr	r2, [sp, #4]
 8003916:	2100      	movs	r1, #0
 8003918:	f7ff ffec 	bl	80038f4 <memset>
 800391c:	4620      	mov	r0, r4
 800391e:	b002      	add	sp, #8
 8003920:	bd10      	pop	{r4, pc}
	...

08003924 <_malloc_r>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	1ccd      	adds	r5, r1, #3
 8003928:	f025 0503 	bic.w	r5, r5, #3
 800392c:	3508      	adds	r5, #8
 800392e:	2d0c      	cmp	r5, #12
 8003930:	bf38      	it	cc
 8003932:	250c      	movcc	r5, #12
 8003934:	2d00      	cmp	r5, #0
 8003936:	4606      	mov	r6, r0
 8003938:	db01      	blt.n	800393e <_malloc_r+0x1a>
 800393a:	42a9      	cmp	r1, r5
 800393c:	d903      	bls.n	8003946 <_malloc_r+0x22>
 800393e:	230c      	movs	r3, #12
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	2000      	movs	r0, #0
 8003944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003946:	f000 f857 	bl	80039f8 <__malloc_lock>
 800394a:	4921      	ldr	r1, [pc, #132]	; (80039d0 <_malloc_r+0xac>)
 800394c:	680a      	ldr	r2, [r1, #0]
 800394e:	4614      	mov	r4, r2
 8003950:	b99c      	cbnz	r4, 800397a <_malloc_r+0x56>
 8003952:	4f20      	ldr	r7, [pc, #128]	; (80039d4 <_malloc_r+0xb0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	b923      	cbnz	r3, 8003962 <_malloc_r+0x3e>
 8003958:	4621      	mov	r1, r4
 800395a:	4630      	mov	r0, r6
 800395c:	f000 f83c 	bl	80039d8 <_sbrk_r>
 8003960:	6038      	str	r0, [r7, #0]
 8003962:	4629      	mov	r1, r5
 8003964:	4630      	mov	r0, r6
 8003966:	f000 f837 	bl	80039d8 <_sbrk_r>
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	d123      	bne.n	80039b6 <_malloc_r+0x92>
 800396e:	230c      	movs	r3, #12
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	4630      	mov	r0, r6
 8003974:	f000 f846 	bl	8003a04 <__malloc_unlock>
 8003978:	e7e3      	b.n	8003942 <_malloc_r+0x1e>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	1b5b      	subs	r3, r3, r5
 800397e:	d417      	bmi.n	80039b0 <_malloc_r+0x8c>
 8003980:	2b0b      	cmp	r3, #11
 8003982:	d903      	bls.n	800398c <_malloc_r+0x68>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	441c      	add	r4, r3
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	e004      	b.n	8003996 <_malloc_r+0x72>
 800398c:	6863      	ldr	r3, [r4, #4]
 800398e:	42a2      	cmp	r2, r4
 8003990:	bf0c      	ite	eq
 8003992:	600b      	streq	r3, [r1, #0]
 8003994:	6053      	strne	r3, [r2, #4]
 8003996:	4630      	mov	r0, r6
 8003998:	f000 f834 	bl	8003a04 <__malloc_unlock>
 800399c:	f104 000b 	add.w	r0, r4, #11
 80039a0:	1d23      	adds	r3, r4, #4
 80039a2:	f020 0007 	bic.w	r0, r0, #7
 80039a6:	1ac2      	subs	r2, r0, r3
 80039a8:	d0cc      	beq.n	8003944 <_malloc_r+0x20>
 80039aa:	1a1b      	subs	r3, r3, r0
 80039ac:	50a3      	str	r3, [r4, r2]
 80039ae:	e7c9      	b.n	8003944 <_malloc_r+0x20>
 80039b0:	4622      	mov	r2, r4
 80039b2:	6864      	ldr	r4, [r4, #4]
 80039b4:	e7cc      	b.n	8003950 <_malloc_r+0x2c>
 80039b6:	1cc4      	adds	r4, r0, #3
 80039b8:	f024 0403 	bic.w	r4, r4, #3
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d0e3      	beq.n	8003988 <_malloc_r+0x64>
 80039c0:	1a21      	subs	r1, r4, r0
 80039c2:	4630      	mov	r0, r6
 80039c4:	f000 f808 	bl	80039d8 <_sbrk_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d1dd      	bne.n	8003988 <_malloc_r+0x64>
 80039cc:	e7cf      	b.n	800396e <_malloc_r+0x4a>
 80039ce:	bf00      	nop
 80039d0:	200002b8 	.word	0x200002b8
 80039d4:	200002bc 	.word	0x200002bc

080039d8 <_sbrk_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d06      	ldr	r5, [pc, #24]	; (80039f4 <_sbrk_r+0x1c>)
 80039dc:	2300      	movs	r3, #0
 80039de:	4604      	mov	r4, r0
 80039e0:	4608      	mov	r0, r1
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	f7fd fbfe 	bl	80011e4 <_sbrk>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_sbrk_r+0x1a>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_sbrk_r+0x1a>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	200003c8 	.word	0x200003c8

080039f8 <__malloc_lock>:
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <__malloc_lock+0x8>)
 80039fa:	f000 b809 	b.w	8003a10 <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	200003d0 	.word	0x200003d0

08003a04 <__malloc_unlock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__malloc_unlock+0x8>)
 8003a06:	f000 b804 	b.w	8003a12 <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	200003d0 	.word	0x200003d0

08003a10 <__retarget_lock_acquire_recursive>:
 8003a10:	4770      	bx	lr

08003a12 <__retarget_lock_release_recursive>:
 8003a12:	4770      	bx	lr

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
